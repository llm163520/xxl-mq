<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxl.mq.admin.mapper.MessageMapper">

    <resultMap id="Message" type="com.xxl.mq.admin.model.entity.Message" >
        <result column="id" property="id" />
        <result column="topic" property="topic" />
        <result column="partition_id" property="partitionId" />
        <result column="data" property="data" />
        <result column="status" property="status" />
        <result column="effect_time" property="effectTime" />
        <result column="retry_count_remain" property="retryCountRemain" />
        <result column="consume_log" property="consumeLog" />
        <result column="consume_instance_uuid" property="consumeInstanceUuid" />
        <result column="add_time" property="addTime" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <sql id="Base_Column_List">
        t.`id`,
        t.`topic`,
        t.`partition_id`,
        t.`data`,
        t.`status`,
        t.`effect_time`,
        t.`retry_count_remain`,
        t.`consume_log`,
        t.`consume_instance_uuid`,
        t.`add_time`,
        t.`update_time`
    </sql>

    <insert id="insert" parameterType="java.util.Map" >
        INSERT INTO xxl_mq_message (
            `topic`,
            `partition_id`,
            `data`,
            `status`,
            `effect_time`,
            `retry_count_remain`,
            `consume_log`,
            `consume_instance_uuid`,
            `add_time`,
            `update_time`
        )
        VALUES(
                  #{message.topic} ,
                  #{message.partitionId} ,
                  #{message.data} ,
                  #{message.status} ,
                  #{message.effectTime} ,
                  #{message.retryCountRemain} ,
                  #{message.consumeLog} ,
                  #{message.consumeInstanceUuid} ,
                  NOW() ,
                  NOW()
              )
    </insert>

    <insert id="batchInsert" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="id" >
        INSERT INTO xxl_mq_message (
            `topic`,
            `partition_id`,
            `data`,
            `status`,
            `effect_time`,
            `retry_count_remain`,
            `consume_log`,
            `consume_instance_uuid`,
            `add_time`,
            `update_time`
        ) VALUES
        <foreach collection ="messageList" item="message" index= "index" separator =",">
            (
                #{message.topic} ,
                #{message.partitionId} ,
                #{message.data} ,
                #{message.status} ,
                #{message.effectTime} ,
                #{message.retryCountRemain} ,
                #{message.consumeLog} ,
                #{message.consumeInstanceUuid} ,
                NOW() ,
                NOW()
            )
        </foreach >
        <selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <delete id="delete" parameterType="java.util.Map" >
        DELETE FROM xxl_mq_message
        WHERE `id` in
        <foreach collection="ids" item="item" open="(" close=")" separator="," >
            #{item}
        </foreach>
    </delete>

    <update id="update" parameterType="java.util.Map" >
        UPDATE xxl_mq_message
        SET
            `data` = #{message.data},
            `status` = #{message.status},
            `effect_time` = #{message.effectTime},
            `consume_log` = #{message.consumeLog},
            `consume_instance_uuid` = #{message.consumeInstanceUuid},
            `update_time` = NOW()
        WHERE `id` = #{message.id}
    </update>

    <select id="load" parameterType="java.util.Map" resultMap="Message">
        SELECT <include refid="Base_Column_List" />
        FROM xxl_mq_message AS t
        WHERE t.`id` = #{id}
    </select>

    <select id="pageList" parameterType="java.util.Map" resultMap="Message">
        SELECT <include refid="Base_Column_List" />
        FROM xxl_mq_message AS t
        WHERE t.`topic` = #{topic}
            <if test="status gt -1">
                AND t.status = #{status}
            </if>
            <if test="effectTimeStart != null">
                AND t.effect_time <![CDATA[ >= ]]> #{effectTimeStart}
            </if>
            <if test="effectTimeEnd != null">
                AND t.effect_time <![CDATA[ <= ]]> #{effectTimeEnd}
            </if>
        ORDER BY t.`id` ASC
        LIMIT #{offset}, #{pagesize}
    </select>

    <select id="pageListCount" parameterType="java.util.Map" resultType="int">
        SELECT count(1)
        FROM xxl_mq_message AS t
        WHERE t.`topic` = #{topic}
            <if test="status gt -1">
                AND t.status = #{status}
            </if>
            <if test="effectTimeStart != null">
                AND t.effect_time <![CDATA[ >= ]]> #{effectTimeStart}
            </if>
            <if test="effectTimeEnd != null">
                AND t.effect_time <![CDATA[ <= ]]> #{effectTimeEnd}
            </if>
    </select>

    <select id="queryByTopicAndStatus" parameterType="java.util.Map" resultMap="Message">
        SELECT <include refid="Base_Column_List" />
        FROM xxl_mq_message AS t
        WHERE t.`topic` = #{topic}
            AND t.`status` in
            <foreach collection="archiveStatusList" item="item" open="(" close=")" separator="," >
                #{item}
            </foreach>
        ORDER BY t.`id` ASC
        LIMIT #{pageSize}
    </select>

    <select id="count" parameterType="java.util.Map" resultType="int">
        SELECT count(1)
        FROM xxl_mq_message AS t
    </select>

    <select id="queryReport" resultType="com.xxl.mq.admin.model.entity.MessageReport" >
        SELECT
            DATE_FORMAT(`effect_time`,'%Y-%m-%d') effectTime,
            COUNT(`id`) totalCount,
            SUM(CASE WHEN (`status` = 2) then 1 else 0 end) as successTotal,
            SUM(CASE WHEN `status` in (3, 4) then 1 else 0 end) as failTotal
        FROM xxl_mq_message
        WHERE effect_time BETWEEN #{startDate} and #{endDate}
        GROUP BY effectTime
        ORDER BY effectTime
    </select>

    <update id="batchUpdateStatus" parameterType="java.util.Map" >
        UPDATE xxl_mq_message
        SET
            `status` =
                <foreach collection="messageList" item="messageItem" index="index" separator=" " open="case id" close="end">
                    when #{messageItem.id} then #{messageItem.status}
                </foreach>
            ,
            `consume_log` =
                <foreach collection="messageList" item="messageItem" index="index" separator=" " open="case id" close="end">
                    when #{messageItem.id} then CONCAT(`consume_log`, #{messageItem.consumeLog})
                </foreach>
        WHERE `id` IN
            <foreach collection="messageList" item="messageItem"  index="index" separator="," open="(" close=")">
                #{messageItem.id}
            </foreach>
    </update>

    <select id="pullQuery" parameterType="java.util.Map" resultMap="Message">
        WITH PullTopicData AS (
            SELECT
                `id`,
                `topic`,
                `data`,
                ROW_NUMBER() OVER (PARTITION BY `topic` ORDER BY `effect_time`) as rn
            FROM xxl_mq_message
            WHERE
                `topic` IN
                    <foreach collection="topicList" item="item" open="(" close=")" separator="," >
                        #{item}
                    </foreach>
                AND `status` = #{status}
                AND `partition_id` BETWEEN #{partitionIdFrom} AND #{partitionIdTo}
                AND `effect_time` <![CDATA[ <= ]]> NOW()
            ORDER BY `id` asc
            LIMIT #{pagesize}
        )
        SELECT
            `id`,
            `topic`,
            `data`
        FROM PullTopicData
        WHERE rn <![CDATA[ <= ]]> #{pagesize}
    </select>

    <update id="pullLock" parameterType="java.util.Map" >
        UPDATE xxl_mq_message
        SET
            `status` = #{statuTo},
            `consume_instance_uuid` = #{instanceUuid},
            `update_time` = NOW()
        WHERE `id` IN
            <foreach collection="messageIdList" item="item" open="(" close=")" separator="," >
                #{item}
            </foreach>
            AND status = #{statuFrom}
    </update>

    <select id="pullQueryByUuid" parameterType="java.util.Map" resultMap="Message">
        SELECT <include refid="Base_Column_List" />
        FROM xxl_mq_message AS t
        WHERE t.`topic` = #{topic}
        AND t.`id` IN
            <foreach collection="messageIdList" item="item" open="(" close=")" separator="," >
                #{item}
            </foreach>
            AND t.`status` = #{status}
            AND t.`consume_instance_uuid` = #{instanceUuid}
    </select>

    <select id="queryRetryDataById" parameterType="java.util.Map" resultMap="Message">
        SELECT <include refid="Base_Column_List" />
        FROM xxl_mq_message AS t
        WHERE t.`id` IN
            <foreach collection="messageIdList" item="item" open="(" close=")" separator="," >
                #{item}
            </foreach>
        AND t.`status` IN
            <foreach collection="statusList" item="item" open="(" close=")" separator="," >
                #{item}
            </foreach>
        AND t.`retry_count_remain` <![CDATA[ > ]]> 0
    </select>

    <select id="queryRetryDataByPage" parameterType="java.util.Map" resultMap="Message">
        SELECT <include refid="Base_Column_List" />
        FROM xxl_mq_message AS t
        WHERE t.`status` IN
                <foreach collection="failStatusList" item="item" open="(" close=")" separator="," >
                    #{item}
                </foreach>
            AND t.`retry_count_remain` <![CDATA[ > ]]> 0
        LIMIT #{pagesize}
    </select>

    <update id="batchFailRetry" parameterType="java.util.Map" >
        UPDATE xxl_mq_message AS t
        SET t.`status` = #{newStatus},
            t.`effect_time` =
                <foreach collection="failMessageList" item="messageItem" index="index" separator=" " open="case id" close="end">
                    when #{messageItem.id} then #{messageItem.effectTime}
                </foreach>
            ,
            t.`retry_count_remain` = retry_count_remain - 1,
            t.`consume_log` = CONCAT( IFNULL(t.`consume_log`, '') , #{consumeLog} ),
            t.`update_time` = NOW()
        WHERE t.`id` IN
                <foreach collection="failMessageList" item="messageItem" open="(" close=")" separator="," >
                    #{messageItem.id}
                </foreach>
            AND t.`status` IN
                <foreach collection="failStatusList" item="item" open="(" close=")" separator="," >
                    #{item}
                </foreach>
            AND t.`retry_count_remain` <![CDATA[ > ]]> 0
    </update>

    <update id="updateStuck2FailWithPage" parameterType="java.util.Map" >
        UPDATE xxl_mq_message
        SET
        `status` = #{failStatus},
        `update_time` = NOW()
        WHERE `status` = #{runningStatus}
            AND update_time <![CDATA[ < ]]> #{stuckTime}
        LIMIT #{pagesize}
    </update>


</mapper>
